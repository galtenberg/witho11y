// Code generated by MockGen. DO NOT EDIT.
// Source: ./dependency.go
//
// Generated by this command:
//
//	mockgen -source=./dependency.go -destination=./mock_dependency.go -package=otelmock
//

// Package otelmock is a generated GoMock package.
package otelmock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDependency is a mock of Dependency interface.
type MockDependency struct {
	ctrl     *gomock.Controller
	recorder *MockDependencyMockRecorder
}

// MockDependencyMockRecorder is the mock recorder for MockDependency.
type MockDependencyMockRecorder struct {
	mock *MockDependency
}

// NewMockDependency creates a new mock instance.
func NewMockDependency(ctrl *gomock.Controller) *MockDependency {
	mock := &MockDependency{ctrl: ctrl}
	mock.recorder = &MockDependencyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDependency) EXPECT() *MockDependencyMockRecorder {
	return m.recorder
}

// CallDependency mocks base method.
func (m *MockDependency) CallDependency(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallDependency", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallDependency indicates an expected call of CallDependency.
func (mr *MockDependencyMockRecorder) CallDependency(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallDependency", reflect.TypeOf((*MockDependency)(nil).CallDependency), ctx)
}
